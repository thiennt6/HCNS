"use strict"; var FontInspector = function () { var e, t = !1, n = "data-font-name"; function a() { for (var e = document.querySelectorAll("div[" + n + "]"), t = 0, a = e.length; t < a; ++t) { e[t].className = "debuggerHideText" } } function r(e, t) { for (var a = document.querySelectorAll("div[" + n + "=" + e + "]"), r = 0, i = a.length; r < i; ++r) { a[r].className = t ? "debuggerShowText" : "debuggerHideText" } } function i(e) { if (e.target.dataset.fontName && "DIV" === e.target.tagName.toUpperCase()) for (var t = e.target.dataset.fontName, n = document.getElementsByTagName("input"), a = 0; a < n.length; ++a) { var i = n[a]; i.dataset.fontName === t && (i.checked = !i.checked, r(t, i.checked), i.scrollIntoView()) } } return { id: "FontInspector", name: "Font Inspector", panel: null, manager: null, init: function () { var t = this.panel; t.setAttribute("style", "padding: 5px;"); var n = document.createElement("button"); n.addEventListener("click", a), n.textContent = "Refresh", t.appendChild(n), e = document.createElement("div"), t.appendChild(e) }, cleanup: function () { e.textContent = "" }, enabled: !1, get active() { return t }, set active(e) { (t = e) ? (document.body.addEventListener("click", i, !0), a()) : (document.body.removeEventListener("click", i, !0), function () { for (var e = document.querySelectorAll("div[" + n + "]"), t = 0, a = e.length; t < a; ++t) e[t].className = "" }()) }, fontAdded: function (t, n) { var i = function (e, t) { for (var n = document.createElement("table"), a = 0; a < t.length; a++) { var r = document.createElement("tr"), i = document.createElement("td"); i.textContent = t[a], r.appendChild(i); var d = document.createElement("td"); d.textContent = e[t[a]].toString(), r.appendChild(d), n.appendChild(r) } return n }(t, ["name", "type"]), d = t.loadedName, o = document.createElement("div"), l = document.createElement("span"); l.textContent = d; var s = document.createElement("a"); n ? (n = /url\(['"]?([^\)"']+)/.exec(n), s.href = n[1]) : t.data && (n = URL.createObjectURL(new Blob([t.data], { type: t.mimeType })), s.href = n), s.textContent = "Download"; var c = document.createElement("a"); c.href = "", c.textContent = "Log", c.addEventListener("click", function (e) { e.preventDefault(), console.log(t) }); var p = document.createElement("input"); p.setAttribute("type", "checkbox"), p.dataset.fontName = d, p.addEventListener("click", function (e, t) { return function () { r(t, e.checked) } }(p, d)), o.appendChild(p), o.appendChild(l), o.appendChild(document.createTextNode(" ")), o.appendChild(s), o.appendChild(document.createTextNode(" ")), o.appendChild(c), o.appendChild(i), e.appendChild(o), setTimeout(function () { this.active && a() }.bind(this), 2e3) } } }(), StepperManager = function () { var e = [], t = null, n = null, a = null, r = {}; return { id: "Stepper", name: "Stepper", panel: null, manager: null, init: function () { var e = this; this.panel.setAttribute("style", "padding: 5px;"), n = document.createElement("div"), (a = document.createElement("select")).addEventListener("change", function (t) { e.selectStepper(this.value) }), n.appendChild(a), t = document.createElement("div"), this.panel.appendChild(n), this.panel.appendChild(t), sessionStorage.getItem("pdfjsBreakPoints") && (r = JSON.parse(sessionStorage.getItem("pdfjsBreakPoints"))) }, cleanup: function () { a.textContent = "", t.textContent = "", e = [] }, enabled: !1, active: !1, create: function (n) { var i = document.createElement("div"); i.id = "stepper" + n, i.setAttribute("hidden", !0), i.className = "stepper", t.appendChild(i); var d = document.createElement("option"); d.textContent = "Page " + (n + 1), d.value = n, a.appendChild(d); var o = r[n] || [], l = new Stepper(i, n, o); return e.push(l), 1 === e.length && this.selectStepper(n, !1), l }, selectStepper: function (t, n) { var r; for (t |= 0, n && this.manager.selectPanel(this), r = 0; r < e.length; ++r) { var i = e[r]; i.pageIndex === t ? i.panel.removeAttribute("hidden") : i.panel.setAttribute("hidden", !0) } var d = a.options; for (r = 0; r < d.length; ++r) { var o = d[r]; o.selected = (0 | o.value) === t } }, saveBreakPoints: function (e, t) { r[e] = t, sessionStorage.setItem("pdfjsBreakPoints", JSON.stringify(r)) } } }(), Stepper = function () { function e(e, t) { var n = document.createElement(e); return t && (n.textContent = t), n } var t = null; function n(e) { if ("string" == typeof e) { return e.length <= 75 ? e : e.substr(0, 75) + "..." } if ("object" != typeof e || null === e) return e; if ("length" in e) { var t, a, r = []; for (t = 0, a = Math.min(10, e.length) ; t < a; t++) r.push(n(e[t])); return t < e.length && r.push("..."), r } var i = {}; for (var d in e) i[d] = n(e[d]); return i } function a(e, t, n) { this.panel = e, this.breakPoint = 0, this.nextBreakPoint = null, this.pageIndex = t, this.breakPoints = n, this.currentIdx = -1, this.operatorListIdx = 0 } return a.prototype = { init: function () { var n = this.panel, a = e("div", "c=continue, s=step"), r = e("table"); a.appendChild(r), r.cellSpacing = 0; var i = e("tr"); if (r.appendChild(i), i.appendChild(e("th", "Break")), i.appendChild(e("th", "Idx")), i.appendChild(e("th", "fn")), i.appendChild(e("th", "args")), n.appendChild(a), this.table = r, !t) for (var d in t = Object.create(null), PDFJS.OPS) t[PDFJS.OPS[d]] = d }, updateOperatorList: function (a) { var r = this; function i() { var e = +this.dataset.idx; this.checked ? r.breakPoints.push(e) : r.breakPoints.splice(r.breakPoints.indexOf(e), 1), StepperManager.saveBreakPoints(r.pageIndex, r.breakPoints) } if (!(this.operatorListIdx > 15e3)) { for (var d = document.createDocumentFragment(), o = Math.min(15e3, a.fnArray.length), l = this.operatorListIdx; l < o; l++) { var s = e("tr"); s.className = "line", s.dataset.idx = l, d.appendChild(s); var c = -1 !== this.breakPoints.indexOf(l), p = a.argsArray[l] || [], u = e("td"), h = e("input"); h.type = "checkbox", h.className = "points", h.checked = c, h.dataset.idx = l, h.onclick = i, u.appendChild(h), s.appendChild(u), s.appendChild(e("td", l.toString())); var v = t[a.fnArray[l]], m = p; if ("showText" === v) { for (var f = p[0], g = [], C = [], b = 0; b < f.length; b++) { var x = f[b]; "object" == typeof x && null !== x ? C.push(x.fontChar) : (C.length > 0 && (g.push(C.join("")), C = []), g.push(x)) } C.length > 0 && g.push(C.join("")), m = [g] } s.appendChild(e("td", v)), s.appendChild(e("td", JSON.stringify(n(m)))) } if (o < a.fnArray.length) { s = e("tr"); var k = e("td", "..."); k.colspan = 4, d.appendChild(k) } this.operatorListIdx = a.fnArray.length, this.table.appendChild(d) } }, getNextBreakPoint: function () { this.breakPoints.sort(function (e, t) { return e - t }); for (var e = 0; e < this.breakPoints.length; e++) if (this.breakPoints[e] > this.currentIdx) return this.breakPoints[e]; return null }, breakIt: function (e, t) { StepperManager.selectStepper(this.pageIndex, !0); var n = this, a = document; n.currentIdx = e; var r = function (e) { switch (e.keyCode) { case 83: a.removeEventListener("keydown", r, !1), n.nextBreakPoint = n.currentIdx + 1, n.goTo(-1), t(); break; case 67: a.removeEventListener("keydown", r, !1); var i = n.getNextBreakPoint(); n.nextBreakPoint = i, n.goTo(-1), t() } }; a.addEventListener("keydown", r, !1), n.goTo(e) }, goTo: function (e) { for (var t = this.panel.getElementsByClassName("line"), n = 0, a = t.length; n < a; ++n) { var r = t[n]; (0 | r.dataset.idx) === e ? (r.style.backgroundColor = "rgb(251,250,207)", r.scrollIntoView()) : r.style.backgroundColor = null } } }, a }(), Stats = function () { var e = []; function t(e) { for (; e.hasChildNodes() ;) e.removeChild(e.lastChild) } return { id: "Stats", name: "Stats", panel: null, manager: null, init: function () { this.panel.setAttribute("style", "padding: 5px;"), PDFJS.enableStats = !0 }, enabled: !1, active: !1, add: function (n, a) { if (a) { var r = function (t) { for (var n = 0, a = e.length; n < a; ++n) if (e[n].pageNumber === t) return n; return !1 }(n); if (!1 !== r) { var i = e[r]; this.panel.removeChild(i.div), e.splice(r, 1) } var d = document.createElement("div"); d.className = "stats"; var o = document.createElement("div"); o.className = "title", o.textContent = "Page: " + n; var l = document.createElement("div"); l.textContent = a.toString(), d.appendChild(o), d.appendChild(l), e.push({ pageNumber: n, div: d }), e.sort(function (e, t) { return e.pageNumber - t.pageNumber }), t(this.panel); for (var s = 0, c = e.length; s < c; ++s) this.panel.appendChild(e[s].div) } }, cleanup: function () { e = [], t(this.panel) } } }(), PDFBug = function () { var e = [], t = null; return { tools: [FontInspector, StepperManager, Stats], enable: function (e) { var t = !1, n = this.tools; 1 === e.length && "all" === e[0] && (t = !0); for (var a = 0; a < n.length; ++a) { var r = n[a]; (t || -1 !== e.indexOf(r.id)) && (r.enabled = !0) } t || n.sort(function (t, a) { var r = e.indexOf(t.id); r = r < 0 ? n.length : r; var i = e.indexOf(a.id); return r - (i = i < 0 ? n.length : i) }) }, init: function () { var t = document.createElement("div"); t.id = "PDFBug"; var n = document.createElement("div"); n.setAttribute("class", "controls"), t.appendChild(n); var a = document.createElement("div"); a.setAttribute("class", "panels"), t.appendChild(a); var r = document.getElementById("viewerContainer"); r.appendChild(t), r.style.right = "300px"; for (var i = this.tools, d = this, o = 0; o < i.length; ++o) { var l = i[o], s = document.createElement("div"), c = document.createElement("button"); c.textContent = l.name, c.addEventListener("click", function (e) { return function (t) { t.preventDefault(), d.selectPanel(e) } }(o)), n.appendChild(c), a.appendChild(s), l.panel = s, l.manager = this, l.enabled ? l.init() : s.textContent = l.name + ' is disabled. To enable add  "' + l.id + '" to the pdfBug parameter and refresh (seperate multiple by commas).', e.push(c) } this.selectPanel(0) }, cleanup: function () { for (var e = 0, t = this.tools.length; e < t; e++) this.tools[e].enabled && this.tools[e].cleanup() }, selectPanel: function (n) { if ("number" != typeof n && (n = this.tools.indexOf(n)), n !== t) { t = n; for (var a = this.tools, r = 0; r < a.length; ++r) r === n ? (e[r].setAttribute("class", "active"), a[r].active = !0, a[r].panel.removeAttribute("hidden")) : (e[r].setAttribute("class", ""), a[r].active = !1, a[r].panel.setAttribute("hidden", "true")) } } } }();